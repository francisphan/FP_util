#!/usr/bin/env ruby
require 'optparse'

class ScriptArguments < Hash
    def initialize(args)
        super()

        opt_parser = OptionParser.new do |opts|
            opts.banner = 'Usage: groot [options]'

            opts.on('-t ', '--tool TOOL', 'Pass the name of a tool you would like to set up') do |tool|
                self[:tool] = tool
            end

            opts.on_tail('-h', '--help', 'Display this help and exit') do
                puts opts
                exit
            end
        end

        opt_parser.parse!(args)
    end
end
arguments = ScriptArguments.new(ARGV)

class ToolInstaller
    def initialize(args)
        @tool = args[:tool]
        @repo_path = Dir.pwd + File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__)
        @repo_path.slice!('.')
        @tool_path = "#{@repo_path}/tools/#{@tool}"
    end

    def install_script_tool?
        if File.exist?("#{@repo_path}/config/#{@tool}_install")
            @install_script = "#{@repo_path}/config/#{@tool}_install"
        end
    end

    def setup
        system 'mkdir -p /usr/local/bin' unless Dir.exist?('/usr/local/bin')

        system "ln -s #{@repo_path}/groot /usr/local/bin/groot" unless File.exist?('/usr/local/bin/groot')

        success = if install_script_tool?
                      system @install_script.to_s
                  else
                      true
                  end

        if success
            system "ln -s #{@tool_path} /usr/local/bin/#{@tool}" unless File.exist?("/usr/local/bin/#{@tool}")
        else
            puts 'Failed to create symbolic link'
        end
    end
end

groot = ToolInstaller.new(arguments)
groot.setup
